"use strict";
/**
* @author Bazzite (https://www.bazzite.com)
* @license MIT License Copyright (c) 2018 Bazzite
*/
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var data_service_1 = require("../shared/data.service");
var core_10_0_2_1 = require("../@ngx-translate/core@10.0.2");
var router_1 = require("@angular/router");
var router_2 = require("nativescript-angular/router");
var confirmation_service_1 = require("./confirmation.service");
var nativescript_secure_storage_1 = require("nativescript-secure-storage");
var platformModule = require("tns-core-modules/platform");
var ConfirmationComponent = /** @class */ (function () {
    function ConfirmationComponent(translate, routerExtensions, acRoute, myPostService) {
        var _this = this;
        this.translate = translate;
        this.routerExtensions = routerExtensions;
        this.acRoute = acRoute;
        this.myPostService = myPostService;
        this.transactions = [];
        this.expensesChartDataEn = [];
        this.expensesChartDataEs = [];
        this.currentLanguage = 'en';
        this.country = [];
        // public number=""
        this.cc = "";
        this.input = "";
        this.verifyText = "Please Verify the number +";
        this.data = new data_service_1.DataService();
        this.transactions = this.data.getTransactions();
        this.expensesChartDataEn = [
            { name: "Home", ammount: 90 },
            { name: "Auto & Transport", ammount: 76 },
            { name: "Communication", ammount: 60 },
            { name: "Hotel", ammount: 44 }
        ];
        this.expensesChartDataEs = [
            { name: "Hogar", ammount: 20 },
            { name: "Transporte", ammount: 76 },
            { name: "Comunicaci√≥n", ammount: 60 },
            { name: "Hotel", ammount: 44 }
        ];
        translate.onLangChange.subscribe(function (event) {
            _this.currentLanguage = event.lang;
        });
    }
    ConfirmationComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.acRoute.queryParams.subscribe(function (params) {
            if (params["number"]) {
                _this.verifyText = _this.verifyText + String(params["cc"]) + String(params["number"]);
                _this.number = params['number'];
                _this.cc = params['cc'];
            }
        });
    };
    ConfirmationComponent.prototype.onTap = function (e) {
        var _this = this;
        var cc = String(this.cc);
        var pn = String(this.number);
        var udid = platformModule.device.uuid;
        //900C6D4737B9F7D5
        var data = "udid=" + udid + "&cc=" + cc + "&os=IOS&app_id=1&pn=" + pn + "&code=" + String(this.input);
        console.log(data);
        this.myPostService
            .postData(data)
            .subscribe(function (res) {
            //  this.message = (<any>res).json.data.username;
            console.log(res);
            var code = res.code;
            if (code == 204) {
                var secureStorage = new nativescript_secure_storage_1.SecureStorage();
                var value = secureStorage.getSync({
                    key: "sip_user"
                });
                if (!value) {
                    var data_1 = res.data;
                    secureStorage.set({
                        key: "sip_user",
                        value: data_1.user
                    }).then(function (success) { return console.log("Saved User" + success); });
                    secureStorage.set({
                        key: "sip_password",
                        value: data_1.password
                    }).then(function (success) { return console.log("Saved password" + success); });
                    secureStorage.set({
                        key: "sip_proxy",
                        value: data_1.proxy
                    }).then(function (success) { return console.log("Saved proxy" + success); });
                    secureStorage.set({
                        key: "sip_transport",
                        value: data_1.transport
                    }).then(function (success) { return console.log("Saved transport" + success); });
                    secureStorage.set({
                        key: "sip_port",
                        value: data_1.port
                    }).then(function (success) { return console.log("Saved password" + success); });
                    _this.routerExtensions.navigate(['home'], {
                        transition: {
                            name: "fade"
                        },
                        queryParams: {
                            number: String(_this.number),
                            cc: String(_this.countryCode)
                        },
                        clearHistory: true
                    });
                }
                else {
                    _this.routerExtensions.navigate(['home'], {
                        transition: {
                            name: "fade"
                        },
                        queryParams: {
                            number: String(_this.number),
                            cc: String(_this.countryCode)
                        },
                        clearHistory: true
                    });
                }
            }
            else {
                alert("error: " + code + " " + res.error);
            }
        });
    };
    ConfirmationComponent = __decorate([
        core_1.Component({
            selector: "Confirmation",
            moduleId: module.id,
            templateUrl: "./confirmation.component.html",
            providers: [confirmation_service_1.MyregisterPostService]
        }),
        __metadata("design:paramtypes", [core_10_0_2_1.TranslateService, router_2.RouterExtensions,
            router_1.ActivatedRoute, confirmation_service_1.MyregisterPostService])
    ], ConfirmationComponent);
    return ConfirmationComponent;
}());
exports.ConfirmationComponent = ConfirmationComponent;
//# sourceMappingURL=data:application/json;base64,